meta {
  name: create-image
  type: http
  seq: 4
}

post {
  url: http://localhost:3001/api/images
  body: json
  auth: inherit
}

body:json {
  {
    "url": ["https://example.com/test-image.jpg"],
    "title": "Test Image Title",
    "size": 1024000,
    "mimeType": "image/jpeg"
  }
}

tests {
  // Tests for authenticated requests
  test("Status code is 201 when authenticated", () => {
      expect(res.status).to.equal(201);
  });
  
  test("Response has success status when authenticated", () => {
      expect(res.body.status).to.equal("success");
  });
  
  test("Response has image data when authenticated", () => {
      expect(res.body.data.image).to.exist;
  
      // Assert that 'url' is an array
      expect(res.body.data.image.url).to.be.an('array');
  
      // Assert that the array is not empty
      expect(res.body.data.image.url).to.not.be.empty;
  
      // Assert that the first element of the array (or any element) is a string
      // and optionally, you can add a more robust check for a URL pattern
      expect(res.body.data.image.url[0]).to.be.a('string');
  
      // Optional: More robust check to ensure it looks like a URL.
      // This is a simple regex, you might need a more comprehensive one depending on your needs.
      const urlRegex = /^(https?|ftp):\/\/[^\s/$.?#].[^\s]*$/i;
      expect(res.body.data.image.url[0]).to.match(urlRegex);
  
  
      // Original assertions for other fields (keep these as they are still valid)
      expect(res.body.data.image.title).to.equal("Test Image Title");
      expect(res.body.data.image.size).to.equal(1024000);
      expect(res.body.data.image.mimeType).to.equal("image/jpeg");
      expect(res.body.data.image._id).to.exist;
      expect(res.body.data.image.userId).to.equal(bru.getEnvVar("userId"));
      expect(res.body.data.image.createdAt).to.exist;
      expect(res.body.data.image.updatedAt).to.exist;
  
      // Save the image ID for later tests only if we successfully created an image
      bru.setEnvVar("imageId", res.body.data.image._id);
  });
}
